{"version":3,"sources":["App.module.css","containers/FullArray.module.css","components/Button/Button.module.css","components/dropDown/dropDown.module.css","sortingAlgorithms/sortingAlgorithms.js","components/Button/Button.js","store/action.js","components/Slider/Slider.js","containers/FullArray.js","components/dropDown/dropDown.js","App.js","reportWebVitals.js","store/reducer.js","index.js","components/Slider/Slider.module.css"],"names":["module","exports","sleep","ms","Promise","resolve","setTimeout","swap","arr","left","right","changeBarHeight","a","temp","partition","low","high","changeBarColor","sortSpeed","arrayColor","selectedColor","pivotColor","sortedColor","pivot","i","j","height","index","quickSort","array","arraySize","localArray","stack","end","length","push","x","y","shift","color","PI","bubbleSort","isSorted","temp2","k","insertionSort","key","selectionSort","min","connect","state","colorArray","sortType","sorting","sorted","dispatch","generateNewArray","type","changeSortingMethod","method","newMethod","newHeight","newColor","startSorting","stopSorting","props","onClickHandler","window","alert","className","classes","Button","disabled","onClick","changeArraySize","newArraySize","changeSortingSpeed","newSpeed","mobile","innerWidth","document","body","clientWidth","SliderContainer","style","Slider","max","value","onChange","changeEvent","target","width","innerHeight","clientHeight","Parent","marginTop","map","divHeight","Bar","backgroundColor","changeArrayColor","newArrayColor","changeSelectedColor","newSelectedColor","changePivotColor","newPivotColor","changeSortedColor","newSortedColor","Div","Label","for","Dropdown","name","id","form","getElementById","Option","App","Header","Title","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","generateArray","size","Math","floor","random","generateColorArray","initialState","reducer","action","newArr","newColorArr","newColorArray","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","app","ReactDOM","render"],"mappings":"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","file":"static/js/main.76014038.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1sYew\",\"App-logo\":\"App_App-logo__8e-u4\",\"App-logo-spin\":\"App_App-logo-spin__2q9OR\",\"App-header\":\"App_App-header__1Q2Sg\",\"App-link\":\"App_App-link__2RVe3\",\"Text\":\"App_Text__rFCM-\",\"Header\":\"App_Header__2HVrc\",\"Title\":\"App_Title__HZbUu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Parent\":\"FullArray_Parent__3eUs_\",\"Bar\":\"FullArray_Bar__2-ryH\",\"Button\":\"FullArray_Button__QvC69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__4hle7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dropdown\":\"dropDown_Dropdown__2NexP\",\"Option\":\"dropDown_Option__3GPx6\",\"Label\":\"dropDown_Label__23um0\",\"Div\":\"dropDown_Div__yBQb8\"};","\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// functionality ideas\r\n// dropdown to change colour of array, items looking at, and sorted subarray\r\n\r\nconst swap = async (arr, left, right, changeBarHeight) =>  {\r\n    const temp = arr[left]\r\n    changeBarHeight(arr[right], left)\r\n    changeBarHeight(temp, right)\r\n    arr[left] = arr[right]\r\n    arr[right] = temp;\r\n  }\r\n  \r\nconst partition = async (arr, low, high, changeBarHeight, changeBarColor, sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor) => {\r\n    //Pick the first element as pivot\r\n    let pivot = arr[high];\r\n    let i = low;\r\n    \r\n    //Partition the array into two parts using the pivot\r\n    for(let j = low; j < high; j++){\r\n        changeBarColor(selectedColor, j)\r\n        changeBarColor(pivotColor, i)\r\n        await sleep(sortSpeed)\r\n        if(arr[j] <= pivot){    \r\n        await swap(arr, i, j,  (height, index) => changeBarHeight(height, index));\r\n        changeBarColor(arrayColor, j)\r\n        changeBarColor(arrayColor, i)\r\n        i++;\r\n        }\r\n        changeBarColor(arrayColor, j)\r\n        changeBarColor(arrayColor, i)\r\n    }\r\n    \r\n    await swap(arr, i, high,  (height, index) => changeBarHeight(height, index));\r\n    \r\n    //Return the pivot index\r\n    return i;\r\n};\r\n\r\nexport const quickSort = async (array, arraySize, changeBarHeight, changeBarColor, sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor) => {\r\n    sortSpeed = 120000/(sortSpeed*arraySize)\r\n    // speed = 100, size = 300, timeout of 4\r\n    let localArray = [...array]\r\n    //Stack for storing start and end index\r\n    let stack = [];\r\n    \r\n    //Get the start and end index\r\n    let start = 0;\r\n    let end = localArray.length - 1;\r\n    \r\n    //Push start and end index in the stack\r\n    stack.push({x: start, y: end});\r\n    \r\n    //Iterate the stack\r\n    while(stack.length){\r\n        //Get the start and end from the stack\r\n        const { x, y } = stack.shift();\r\n        \r\n        //Partition the array along the pivot\r\n        const PI = await partition(localArray, x, y, (height, index) => changeBarHeight(height, index), (color, index) => changeBarColor(color, index), sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor);\r\n        \r\n        //Push sub array with less elements than pivot into the stack\r\n        if(PI - 1 > x){\r\n        stack.push({x: x, y: PI - 1});\r\n        }\r\n        \r\n        //Push sub array with greater elements than pivot into the stack\r\n        if(PI + 1 < y){\r\n        stack.push({x: PI + 1, y: y});\r\n        }\r\n    }\r\n    for (let i = 0; i < arraySize; i++){\r\n        await sleep(10)\r\n        changeBarColor(sortedColor, i)\r\n    }\r\n}\r\n\r\nexport const bubbleSort = async (array, arraySize, changeBarHeight, changeBarColor, sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor) => {\r\n    sortSpeed = 2500000/(sortSpeed*arraySize*arraySize)\r\n    let localArray = [...array]\r\n    // the array does change dynamically \r\n    // therefore we should make each sort a dispatch\r\n    for (let i = 0; i<arraySize; i++){\r\n        // setTimeout(() => {\r\n            // isSorted optimizes in that if we loop through and its already sorted, we can stop\r\n            let isSorted = true;\r\n            for (let j = 0; j<arraySize-i; j++){\r\n                changeBarColor(selectedColor, j)\r\n                changeBarColor(selectedColor, j+1)\r\n                await sleep(sortSpeed)\r\n                if (localArray[j] > localArray[j+1]){\r\n                    let temp = localArray[j]\r\n                    let temp2 = localArray[j+1]\r\n                    localArray[j] = temp2\r\n                    localArray[j+1] = temp\r\n                    await sleep(sortSpeed)\r\n                    changeBarHeight(temp2, j)\r\n                    changeBarHeight(temp, j+1)\r\n                    isSorted = false;\r\n                } \r\n                changeBarColor(arrayColor, j)\r\n                changeBarColor(arrayColor, j+1)\r\n            }\r\n            changeBarColor(sortedColor, arraySize-1-i)\r\n            changeBarColor(sortedColor, arraySize-i)\r\n            if (isSorted === true){\r\n                for (let k = 0; k < i; k++){\r\n                    changeBarColor(sortedColor, k)\r\n                }\r\n                break;\r\n            }\r\n        // }, i*100)\r\n    }\r\n}\r\n\r\nexport const insertionSort = async (array, arraySize, changeBarHeight, changeBarColor, sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor) => {\r\n    sortSpeed = 16000000/(sortSpeed*arraySize*arraySize)\r\n    let localArray = [...array]\r\n    for (let i = 0; i < arraySize; i++) {\r\n        changeBarColor(sortedColor, i)\r\n        let key = localArray[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && localArray[j] > key) {\r\n            changeBarColor(selectedColor, j)\r\n            await sleep(sortSpeed/2)\r\n            changeBarHeight(localArray[j], j+1)\r\n            localArray[j + 1] = localArray[j];\r\n            changeBarColor(sortedColor, j)\r\n            j -= 1;\r\n        }\r\n        changeBarColor(selectedColor, i)\r\n        changeBarColor(selectedColor, j+1)\r\n        await sleep(sortSpeed/2)\r\n        changeBarHeight(key, j+1)\r\n        localArray[j + 1] = key;\r\n        changeBarColor(sortedColor, i)\r\n        changeBarColor(sortedColor, j+1)\r\n    }\r\n}\r\n\r\nexport const selectionSort = async (array, arraySize, changeBarHeight, changeBarColor, sortSpeed, arrayColor, selectedColor, pivotColor, sortedColor) => {\r\n    sortSpeed = 8000000/(sortSpeed*arraySize*arraySize)\r\n    let localArray = [...array]\r\n    for(let i = 0; i < arraySize; i++) {\r\n        // Finding the smallest number in the subarray\r\n        let min = i;\r\n        for(let j = i+1; j < arraySize; j++){\r\n            changeBarColor(selectedColor, j)\r\n            changeBarColor(pivotColor, min)\r\n            await sleep(sortSpeed)\r\n            if(localArray[j] < localArray[min]) {\r\n                changeBarColor(arrayColor, min)\r\n                min=j; \r\n            } else {\r\n                changeBarColor(arrayColor, j)\r\n            }\r\n            \r\n         }\r\n         if (min !== i) {\r\n             changeBarColor(selectedColor, i)\r\n             // Swapping the elements\r\n             await sleep(100)\r\n             changeBarHeight(localArray[min], i);\r\n             changeBarHeight(localArray[i], min);\r\n             [localArray[i], localArray[min]] = [localArray[min], localArray[i]]  \r\n         }\r\n        changeBarColor(sortedColor,i)\r\n        await sleep(sortSpeed)\r\n        if (min !== i){\r\n            changeBarColor(arrayColor,min)\r\n        } \r\n    }\r\n}","import React from 'react' \r\nimport { generateNewArray, changeSortingMethod, changeBarColor, changeBarHeight, startSorting, stopSorting} from '../../store/action';\r\nimport classes from './Button.module.css'\r\nimport {connect} from 'react-redux'\r\nimport {quickSort, bubbleSort, insertionSort, selectionSort} from '../../sortingAlgorithms/sortingAlgorithms'\r\n\r\nconst button = props => {\r\n    const onClickHandler = async () => {\r\n        switch(props.type){\r\n            case 'Generate New Array': props.generateNewArray(); break;\r\n            case 'Sort!': \r\n                if (props.sorted){\r\n                    window.alert(\"Please generate a new array first\")\r\n                    break;\r\n                }\r\n                switch(props.sortType){\r\n                    case 'Quick Sort':props.startSorting(); await quickSort(props.array, props.arraySize, (height, color) => props.changeBarHeight(height, color), (color, index) => props.changeBarColor(color, index), props.sortSpeed, props.arrayColor, props.selectedColor, props.pivotColor, props.sortedColor);props.stopSorting(); break;\r\n                    case 'Bubble Sort':props.startSorting(); await bubbleSort(props.array, props.arraySize, (height, color) => props.changeBarHeight(height, color), (color, index) => props.changeBarColor(color, index), props.sortSpeed, props.arrayColor, props.selectedColor, props.pivotColor, props.sortedColor); props.stopSorting(); break;\r\n                    case 'Insertion Sort':props.startSorting(); await insertionSort(props.array, props.arraySize, (height, color) => props.changeBarHeight(height, color), (color, index) => props.changeBarColor(color, index), props.sortSpeed, props.arrayColor, props.selectedColor, props.pivotColor, props.sortedColor); props.stopSorting(); break;\r\n                    case 'Selection Sort':props.startSorting(); await selectionSort(props.array, props.arraySize, (height, color) => props.changeBarHeight(height, color), (color, index) => props.changeBarColor(color, index), props.sortSpeed, props.arrayColor, props.selectedColor, props.pivotColor, props.sortedColor); props.stopSorting(); break;\r\n                    default: window.alert('Please select a sorting type first'); break;\r\n                }\r\n                break;\r\n            \r\n            default: props.changeSortingMethod(props.type);\r\n        }\r\n    }\r\n    return (\r\n        <button className={classes.Button} disabled={props.sorting} onClick={onClickHandler}>{props.type}</button>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        array: state.array, \r\n        colorArray: state.colorArray,\r\n        arraySize: state.arraySize, \r\n        sortSpeed: state.sortSpeed,\r\n        sortType: state.sortType,\r\n        arrayColor: state.arrayColor,\r\n        selectedColor: state.selectedColor,\r\n        pivotColor: state.pivotColor,\r\n        sortedColor: state.sortedColor,\r\n        sorting: state.sorting,\r\n        sorted: state.sorted\r\n    }   \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        generateNewArray: () => dispatch(generateNewArray()),\r\n        changeSortingMethod: method => dispatch(changeSortingMethod(method)),\r\n        changeBarHeight: (newHeight, index) => dispatch(changeBarHeight(newHeight, index)), \r\n        changeBarColor: (newColor, index) => dispatch(changeBarColor(newColor, index)),\r\n        startSorting: () => dispatch(startSorting()),\r\n        stopSorting: () => dispatch(stopSorting())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(button)","export const changeArraySize = newArraySize => {\r\n    return {\r\n        type:\"CHANGE_ARRAY_SIZE\",\r\n        newArraySize: newArraySize\r\n    }\r\n}\r\n\r\nexport const setNewArray = array => {\r\n    return {\r\n        type: \"SET_NEW_ARRAY\",\r\n        array: array\r\n    }\r\n}\r\n\r\nexport const generateNewArray = () => {\r\n    return {\r\n        type: \"GENERATE_NEW_ARRAY\",\r\n\r\n    }\r\n}\r\n\r\nexport const changeSortingSpeed = newSpeed => {\r\n    return {\r\n        type: \"CHANGE_SORTING_SPEED\",\r\n        newSpeed: newSpeed\r\n    }\r\n}\r\n\r\nexport const changeSortingMethod = method => {\r\n    return {\r\n        type: \"CHANGE_SORTING_METHOD\",\r\n        newMethod: method\r\n    }\r\n}\r\n\r\nexport const changeBarHeight = (newHeight, index) => {\r\n    return {\r\n        type: \"CHANGE_BAR_HEIGHT\",\r\n        newHeight: newHeight,\r\n        index: index\r\n    }\r\n}\r\n\r\nexport const changeBarColor = (newColor, index) => {\r\n    return {\r\n        type: \"CHANGE_BAR_COLOR\",\r\n        newColor: newColor,\r\n        index: index\r\n    }\r\n}\r\n\r\nexport const changeArrayColor = newColor => {\r\n    return {\r\n        type: \"CHANGE_ARRAY_COLOR\",\r\n        newArrayColor: newColor\r\n    }\r\n}\r\n\r\nexport const changeSelectedColor = newColor => {\r\n    return {\r\n        type: \"CHANGE_SELECTED_COLOR\",\r\n        newSelectedColor: newColor\r\n    }\r\n}\r\n\r\nexport const changePivotColor = newColor => {\r\n    return {\r\n        type: \"CHANGE_PIVOT_COLOR\",\r\n        newPivotColor: newColor\r\n    }\r\n}\r\n\r\nexport const changeSortedColor = newColor => {\r\n    return {\r\n        type: \"CHANGE_SORTED_COLOR\",\r\n        newSortedColor: newColor\r\n    }\r\n}\r\n\r\nexport const startSorting = () => {\r\n    return {\r\n        type: \"START_SORTING\"\r\n    }\r\n}\r\n\r\nexport const stopSorting = () => {\r\n    return {\r\n        type: \"STOP_SORTING\"\r\n    }\r\n}","import React from 'react'\r\nimport classes from './Slider.module.css'\r\nimport {connect} from 'react-redux'\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport {changeArraySize, changeSortingSpeed} from '../../store/action'\r\n\r\nconst slider = props => {\r\n    let mobile = (window.innerWidth || document.body.clientWidth) < 600\r\n    if (props.type === \"sizeChanger\"){\r\n        return (\r\n            <div className={classes.SliderContainer}>\r\n                <p style={{color: '#2cd1ab'}}>Size of the Array</p>\r\n                <RangeSlider className={classes.Slider} disabled={props.sorting} min={10} max={mobile ? 150 : 300} value={props.arraySize} onChange={changeEvent => props.changeArraySize(changeEvent.target.value)}/>\r\n            </div>\r\n        )\r\n    } else if (props.type === \"speedChanger\"){\r\n        return (\r\n            <div className={classes.SliderContainer}>\r\n                <p style={{color: '#2cd1ab'}}>Sorting Speed</p>\r\n                <RangeSlider className={classes.Slider} disabled={props.sorting} min={1} max={100} value={props.sortSpeed} onChange={changeEvent => props.changeSortingSpeed(changeEvent.target.value)}/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        arraySize: state.arraySize,\r\n        sortSpeed: state.sortSpeed,\r\n        sorting: state.sorting\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeArraySize: (newArraySize) => dispatch(changeArraySize(newArraySize)),\r\n        changeSortingSpeed: (newSpeed) => dispatch(changeSortingSpeed(newSpeed))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(slider)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport classes from './FullArray.module.css'\r\n\r\n// const sort = (array, colorArray, arraySize, changeBarHeight, changeBarColor) => {\r\n//     let localArray = [...array]\r\n//     // the array does change dynamically \r\n//     // therefore we should make each sort a dispatch\r\n//     for (let i = 0; i<arraySize; i++){\r\n//         for (let j = 0; j<arraySize; j++){\r\n//             setTimeout(()=> {changeBarColor('yellow', j)}, 1000) \r\n//             setTimeout(()=> {changeBarColor('yellow', j+1)}, 1000) \r\n//             if (localArray[j] > localArray[j+1]){\r\n//                 let temp = localArray[j]\r\n//                 setTimeout(()=> {changeBarHeight(localArray[j+1], j)}, 1000) \r\n//                 localArray[j] = localArray[j+1]\r\n//                 setTimeout(()=> {changeBarHeight(temp, j+1)}, 1000) \r\n//                 localArray[j+1] = temp\r\n//             }\r\n//             setTimeout(()=> {changeBarColor('#ff59c7', j)}, 1000) \r\n//             setTimeout(()=> {changeBarColor('#ff59c7', j+1)}, 1000) \r\n//         }\r\n//     }\r\n// }\r\n\r\nconst FullArray = props => {\r\n\r\n    \r\n    // let array = [...props.array]\r\n    // let colorArray = [...props.colorArray]\r\n    let width = window.innerWidth || document.body.clientWidth\r\n    let height = window.innerHeight || document.body.clientHeight\r\n    let mobile = width < 600;\r\n\r\n    return (\r\n    <div className={classes.Parent} style={{left: mobile ? '10px' : `${width/9}px`, marginTop: `${height/10}px`}}>\r\n        {props.array.map((divHeight,index) => (\r\n            <div className={classes.Bar} key={index} style={{backgroundColor: `${props.colorArray[index]}`, height: `${divHeight}px`, width: mobile ? '1px' : `${((width*0.8)/props.arraySize)-2}px`}}></div>\r\n        ))}\r\n        \r\n    </div>)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        arraySize: state.arraySize,\r\n        array: state.array,\r\n        colorArray: state.colorArray,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(FullArray)","import React from 'react'\r\nimport classes from './dropDown.module.css'\r\nimport {changeArrayColor, changeSelectedColor, changePivotColor, changeSortedColor} from '../../store/action'\r\nimport {connect} from 'react-redux'\r\n\r\nconst dropDown = props => {\r\n    // change dropdowns depending on which sort is selected, as some sorts dont have pivots and instead have minimums, etc \r\n    switch(props.type){\r\n        case \"arrayColor\":\r\n            return (\r\n                <div className={classes.Div}>\r\n                <label className={classes.Label} for=\"cars\">Array Color:</label>\r\n                <select className={classes.Dropdown} disabled={props.sorting} style={{color: props.arrayColor}} name=\"color\" id=\"arrayColor\" form=\"colorform\" onChange={() => props.changeArrayColor(document.getElementById(\"arrayColor\").value)}>\r\n                    <option className={classes.Option} value=\"#ff59c7\">Pink</option>\r\n                    <option className={classes.Option} value=\"#f4fc00\">Yellow</option>\r\n                    <option className={classes.Option} value=\"#002afc\">Blue</option>\r\n                    <option className={classes.Option} value=\"#e31414\">Red</option>\r\n                </select>\r\n                </div>\r\n            )\r\n        case \"selectedColor\":\r\n            return (\r\n                <div className={classes.Div}>\r\n                <label className={classes.Label} for=\"cars\">Selected Bar Color:</label>\r\n                <select className={classes.Dropdown} disabled={props.sorting} style={{color: props.selectedColor}} name=\"color\" id=\"selectedColor\" form=\"colorform\" onChange={() => props.changeSelectedColor(document.getElementById(\"selectedColor\").value)}>\r\n                    <option className={classes.Option} value=\"#f4fc00\">Yellow</option>\r\n                    <option className={classes.Option} value=\"#ff59c7\">Pink</option>\r\n                    <option className={classes.Option} value=\"#002afc\">Blue</option>\r\n                    <option className={classes.Option} value=\"#e31414\">Red</option>\r\n                </select>\r\n                </div>\r\n            )\r\n        case \"pivotColor\":\r\n            if (props.sortType === \"Quick Sort\"){\r\n                return (\r\n                    <div className={classes.Div}>\r\n                    <label className={classes.Label} for=\"cars\">Pivot Color:</label>\r\n                    <select className={classes.Dropdown} disabled={props.sorting} style={{color: props.pivotColor}} name=\"color\" id=\"pivotColor\" form=\"colorform\" onChange={() => props.changePivotColor(document.getElementById(\"pivotColor\").value)}>\r\n                        <option className={classes.Option} value=\"#e31414\">Red</option>\r\n                        <option className={classes.Option} value=\"#ff59c7\">Pink</option>\r\n                        <option className={classes.Option} value=\"#f4fc00\">Yellow</option>\r\n                        <option className={classes.Option} value=\"#002afc\">Blue</option>\r\n                    </select>\r\n                    </div>\r\n                )\r\n            } else{return null}\r\n        case \"minColor\":\r\n            if (props.sortType === \"Selection Sort\"){\r\n                return (\r\n                    <div className={classes.Div}>\r\n                    <label className={classes.Label} for=\"cars\">Minimum Value Color:</label>\r\n                    <select className={classes.Dropdown} disabled={props.sorting} style={{color: props.pivotColor}} name=\"color\" id=\"minColor\" form=\"colorform\" onChange={() => props.changePivotColor(document.getElementById(\"minColor\").value)}>\r\n                        <option className={classes.Option} value=\"#e31414\">Red</option>\r\n                        <option className={classes.Option} value=\"#ff59c7\">Pink</option>\r\n                        <option className={classes.Option} value=\"#f4fc00\">Yellow</option>\r\n                        <option className={classes.Option} value=\"#002afc\">Blue</option>\r\n                    </select>\r\n                    </div>\r\n                ) \r\n            }else { return null;}\r\n        case \"sortedColor\":\r\n            return (\r\n                <div className={classes.Div}>\r\n                <label className={classes.Label} for=\"cars\">Sorted array color:</label>\r\n                <select className={classes.Dropdown} disabled={props.sorting} style={{color: props.sortedColor}} name=\"color\" id=\"lookingColor\" form=\"colorform\" onChange={() => props.changeSortedColor(document.getElementById(\"lookingColor\").value)}>\r\n                    <option className={classes.Option} value=\"#002afc\">Blue</option>\r\n                    <option className={classes.Option} value=\"#ff59c7\">Pink</option>\r\n                    <option className={classes.Option} value=\"#f4fc00\">Yellow</option>\r\n                    <option className={classes.Option} value=\"#e31414\">Red</option>\r\n                </select>\r\n                </div>\r\n            )\r\n        default: return null;\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        sortType: state.sortType,\r\n        sorting: state.sorting,\r\n        arrayColor: state.arrayColor,\r\n        selectedColor: state.selectedColor,\r\n        pivotColor: state.pivotColor,\r\n        sortedColor: state.sortedColor\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeArrayColor: newColor => dispatch(changeArrayColor(newColor)),\r\n        changeSelectedColor: newColor => dispatch(changeSelectedColor(newColor)),\r\n        changePivotColor: newColor => dispatch(changePivotColor(newColor)),\r\n        changeSortedColor: newColor => dispatch(changeSortedColor(newColor))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(dropDown)","import classes from \"./App.module.css\";\nimport Button from './components/Button/Button'\nimport Slider from './components/Slider/Slider'\nimport FullArray from './containers/FullArray'\nimport DropDown from './components/dropDown/dropDown'\nimport React from 'react'\n\nconst App = props => {\n  return (\n    <div className={classes.App}>\n      <header className={classes.Header}>\n        <p className={classes.Title}>Sorting Visualizer</p>\n      </header>\n      <Button type=\"Quick Sort\"/>\n      <Button type=\"Bubble Sort\"/>\n      <Button type=\"Insertion Sort\"/>\n      <Button type=\"Selection Sort\"/>\n      <div style={{display: 'block'}}>\n        <Slider type=\"sizeChanger\"/>\n        <Slider type=\"speedChanger\"/>\n      </div>\n      <div style={{display: 'block'}}>\n        <DropDown type=\"arrayColor\"/>\n        <DropDown type=\"selectedColor\"/>\n        <DropDown type=\"minColor\"/>\n        <DropDown type=\"pivotColor\"/>\n        <DropDown type=\"sortedColor\"/>\n      </div>\n      <Button type=\"Generate New Array\"/>\n      <Button type=\"Sort!\"/>\n      <FullArray/>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const generateArray = size => {\r\n    let array = []\r\n    for (let i = 0; i < size; i++){\r\n        array.push(Math.floor(Math.random() * (350-10) + 10))\r\n    }\r\n    return array\r\n}\r\n\r\nconst generateColorArray = (size, arrayColor) => {\r\n    let array = []\r\n    for (let i = 0; i < size; i++){\r\n        array.push(arrayColor) // optional yellow #d18c2c\r\n    }\r\n    return array\r\n}\r\n\r\nlet mobile = (window.innerWidth || document.body.clientWidth) < 600\r\n\r\nconst initialState = {\r\n    arraySize: mobile ? 80 : 145,\r\n    sortSpeed: '50',\r\n    sortType: '',\r\n    sorting: false,\r\n    sorted: false,\r\n    arrayColor: '#ff59c7',\r\n    selectedColor: '#f4fc00',\r\n    // pivotColor is also used for minimum\r\n    pivotColor: '#e31414',\r\n    sortedColor: '#002afc',\r\n    array: generateArray(145),\r\n    colorArray: generateColorArray(145, '#ff59c7')\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    switch (action.type){\r\n        case \"CHANGE_ARRAY_SIZE\": \r\n        return {\r\n            ...state, arraySize: action.newArraySize*1.0, array: generateArray(action.newArraySize), colorArray: generateColorArray(action.newArraySize, state.arrayColor), sorted: false\r\n        }\r\n        case \"GENERATE_NEW_ARRAY\": \r\n        return {\r\n            ...state, array: generateArray(state.arraySize), colorArray: generateColorArray(state.arraySize, state.arrayColor), sorted: false\r\n        }\r\n        case \"CHANGE_SORTING_SPEED\":\r\n            return {\r\n                ...state, sortSpeed: action.newSpeed\r\n            }\r\n        case \"CHANGE_SORTING_METHOD\":\r\n            return {\r\n                ...state, sortType: action.newMethod\r\n            }\r\n        case \"CHANGE_BAR_HEIGHT\":\r\n            let newArr = [...state.array]\r\n            newArr[action.index] = action.newHeight\r\n            return {\r\n                ...state, array: newArr\r\n            }\r\n        // eslint-disable-next-line no-duplicate-case\r\n        case \"CHANGE_BAR_COLOR\":\r\n            let newColorArr = [...state.colorArray]\r\n            newColorArr[action.index] = action.newColor\r\n            return {\r\n                ...state, colorArray: newColorArr\r\n            }\r\n        case \"CHANGE_ARRAY_COLOR\":\r\n            let newColorArray = generateColorArray(state.arraySize, action.newArrayColor)\r\n            return {\r\n                ...state, colorArray: newColorArray, arrayColor: action.newArrayColor\r\n            }\r\n        case \"CHANGE_SELECTED_COLOR\":\r\n            return {\r\n                ...state, selectedColor: action.newSelectedColor\r\n            }\r\n        case \"CHANGE_PIVOT_COLOR\":\r\n            return {\r\n                ...state, pivotColor: action.newPivotColor\r\n            }\r\n        case \"CHANGE_SORTED_COLOR\":\r\n            return {\r\n                ...state, sortedColor: action.newSortedColor\r\n            }\r\n        case \"START_SORTING\":\r\n            return {\r\n                ...state, sorting: true\r\n            }\r\n        case \"STOP_SORTING\":\r\n            return {\r\n                ...state, sorting: false, sorted: true\r\n            }\r\n        default: return {...state};\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport reducer from './store/reducer'\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nconst app = <Provider store={store}><App/></Provider>\n\nReactDOM.render(app,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nexport {store};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SliderContainer\":\"Slider_SliderContainer__rr4xN\",\"Slider\":\"Slider_Slider__yYOWa\"};"],"sourceRoot":""}